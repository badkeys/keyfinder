#!/usr/bin/python3
#
# SPDX-License-Identifier: MIT

import argparse
import logging
import os
import shutil
import subprocess
import tempfile
import urllib

import pygit2

import keyfinder

ap = argparse.ArgumentParser()
ap.add_argument("repo", help="URL or local path of git repository")
ap.add_argument("--keep", action="store_true", help="Don't delete tmpdir")
ap.add_argument("-o", "--outdir", default="out", help="Output dir")
ap.add_argument("-D", "--dupfile", help="Store duplicate information")
ap.add_argument("--nobadkeys", action="store_true", help="Don't check with badkeys")
ap.add_argument("--log", help="Logfile")
args = ap.parse_args()

if args.log:
    logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s",
                        filename=args.log, level=logging.INFO)
logger = logging.getLogger(__name__)

tmpdir = tempfile.mkdtemp(prefix="gitkf")

if args.dupfile and os.path.exists(args.dupfile):
    keyfinder.load_dupfile(args.dupfile)

usebk = True
if args.nobadkeys:
    usebk = False

shortd = {
    "github.com": "hub",
    "gitlab.com": "lab",
}

print(f"Looking for keys in {args.repo}")

if "://" in args.repo:
    logger.info("Cloning repo %s", args.repo)
    # Call git directly, as cloning with libgit2/pygit2 is
    # very slow: https://github.com/libgit2/libgit2/issues/4674
    subprocess.check_output(["git", "clone", args.repo, tmpdir], env={"GIT_TERMINAL_PROMPT": "0"})
    rep = pygit2.Repository(tmpdir)
    up = urllib.parse.urlparse(args.repo)
    host = up.hostname
    if up.hostname in shortd:
        host = shortd[up.hostname]
    # make sure we do not have hidden directory names
    mypath = up.path.replace("/.", "/_")
    outdir = f"{args.outdir}/{host}/{mypath}"
else:
    rep = pygit2.Repository(args.repo)
    outdir = args.outdir

logger.info("Checking repo object db")

dd = rep.odb

results = {}
for oid in dd:
    o = rep.get(oid)
    if isinstance(o, pygit2.Blob):
        logger.info("Checking %s", oid)
        keys = keyfinder.findkeys(o.read_raw(), usebk=usebk)
        if keys:
            results[str(oid)] = keys
            print(f"found key(s) in {oid}")

logger.info("Finding filenames")
fnames = {}
for oid in dd:
    o = rep.get(oid)
    if isinstance(o, pygit2.Tree):
        for x in o:
            gid = str(x.id)
            if gid in results and id not in fnames:
                fnames[gid] = x.name

logger.info("Writing keys")
for gitid, v in results.items():
    for spki, key in v.items():
        fn = fnames.get(gitid, gitid)
        prefix = f"id: {gitid}\n\n"
        keyfinder.writekey(prefix + key, fn, outdir, spki)

if args.keep:
    print(f"Git clone / tmpdir not removed: {tmpdir}")
else:
    shutil.rmtree(tmpdir)

if args.dupfile:
    keyfinder.write_dupfile(args.dupfile)
