#!/usr/bin/python3
#
# SPDX-License-Identifier: MIT

import argparse
import os
import re
import shutil
import subprocess
import tempfile

import keyfinder


def findinarchive(tfp, toutdir, parseerr, usebk, verbose, depth=0):
    # Avoid deep recursion
    if depth >= 2:
        return

    tmpd = tempfile.mkdtemp(prefix="tarfinder")
    subprocess.call(["bsdtar", "-C", tmpd, "--no-same-permissions", "--no-same-owner",
                     "--passphrase", "password", "-xf", tfp])
    for p, _, files in os.walk(tmpd):
        for fn in files:
            fp = os.path.join(p, fn)
            if not os.path.isfile(fp):
                continue
            # recursive search with common archive types
            if fn.endswith((".zip", ".tar.gz", ".tar.bz2", ".tar.xz")):
                findinarchive(fp, toutdir, parseerr, usebk, verbose, depth + 1)
            keyfinder.findinfile(fp, toutdir, parseerr, usebk, verbose)
    shutil.rmtree(tmpd)


ap = argparse.ArgumentParser()
ap.add_argument("input", nargs="+")
ap.add_argument("-o", "--outdir", required=True)
ap.add_argument("-p", "--parseerr", help="Output dir for unparsable candidates")
ap.add_argument("--nobadkeys", action="store_true", help="Don't check with badkeys")
ap.add_argument("-D", "--dupfile", help="Store duplicate information")
ap.add_argument("-q", "--quiet", action="store_true")
args = ap.parse_args()

if args.dupfile and os.path.exists(args.dupfile):
    keyfinder.load_dupfile(args.dupfile)

usebk = not args.nobadkeys
verbose = not args.quiet

for path in args.input:
    for tp, _, tfiles in os.walk(path):
        for tfn in tfiles:
            tfp = os.path.join(tp, tfn)
            # Avoid url-unsafe characters in dirname
            ffn = re.sub(r"(^[.-]|[^A-Za-z0-9._-])", "_", tfn)
            toutdir = os.path.join(args.outdir, ffn)
            print(f"Looking for keys in {tfp}")
            findinarchive(tfp, toutdir, args.parseerr, usebk, verbose)


if args.dupfile:
    keyfinder.write_dupfile(args.dupfile)
